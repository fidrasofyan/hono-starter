{
	"Route handlers": {
		"prefix": "apphandlers",
		"description": "Create route handlers",
		"body": [
			"import { validationFunc } from '@/lib/common';",
			"import { userCan } from '@/middleware';",
			"import type { JWTPayload } from '@/types';",
			"import { createFactory } from 'hono/factory';",
			"import { validator } from 'hono/validator';",
			"import { z } from 'zod';",
			"",
			"const factory = createFactory();",
			"const ${1:user}Schema = z.object({",
			"  property: z",
			"    .string({",
			"      message: 'Invalid property',",
			"    })",
			"    .min(1, {",
			"      message: 'Property cannot be empty',",
			"    }),",
			"});",
			"",
			"export const ${1:user}Handlers = factory.createHandlers(",
			"  // Authorization",
			"  userCan('${2:user}:${3:read}'),",
			"",
			"  // Validator",
			"  validator('json', validationFunc(${1:user}Schema)),",
			"",
			"  // Handler",
			"  async (c) => {",
			"    const jwtPayload = c.get('jwtPayload') as JWTPayload;",
			"    const body = c.req.valid('json');",
			"",
			"    ${0}",
			"",
			"    return c.json(",
			"      {",
			"        message: 'Message',",
			"      },",
			"      200,",
			"    );",
			"  },",
			");",
			"",
		]
	},
	"Export start": {
		"prefix": "appexportstar",
		"description": "Export start",
		"body": [
			"export * from './${1}';",
		]
	},
	"Kysely transaction": {
		"prefix": "kyselytransaction",
		"description": "Kysely transaction",
		"body": [
			"const result = await kysely.transaction().execute(async (trx) => {${0}});",
		]
	}
}