datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/database"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

// Models

model ActivityLog {
  id         Int       @id @default(autoincrement())
  businessId Int
  userId     Int
  action     String    @db.VarChar(100)
  status     String    @db.VarChar(100)
  message    String?   @db.VarChar(255)
  context    Json?     @db.JsonB
  createdAt  DateTime  @db.Timestamptz()
  updatedAt  DateTime? @db.Timestamptz()

  // Foreign key
  Business Business @relation(fields: [businessId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  User     User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([businessId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Business {
  id        Int       @id @default(autoincrement())
  isActive  Boolean
  name      String    @db.VarChar(50)
  address   String?   @db.VarChar(100)
  createdAt DateTime  @db.Timestamptz()
  updatedAt DateTime? @db.Timestamptz()

  ActivityLog ActivityLog[]
  Role        Role[]
  User        User[]

  @@unique([name])
}

model Permission {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  RolePermission RolePermission[]

  @@unique([name])
}

model RolePermission {
  roleId       Int
  permissionId Int

  Role       Role       @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String?   @db.VarChar(100)
  createdAt   DateTime  @db.Timestamptz()
  updatedAt   DateTime? @db.Timestamptz()

  Business   Business @relation(fields: [businessId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  businessId Int

  UserRole       UserRole[]
  RolePermission RolePermission[]

  @@unique([name, businessId])
}

model UserRole {
  userId Int
  roleId Int

  User User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Role Role @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, roleId])
}

model User {
  id         Int     @id @default(autoincrement())
  businessId Int
  isActive   Boolean
  email      String  @db.VarChar(100)
  username   String? @db.VarChar(100)
  password   String? @db.VarChar(255)
  firstName  String  @db.VarChar(50)
  lastName   String? @db.VarChar(50)

  createdBy Int?
  createdAt DateTime  @db.Timestamptz()
  updatedBy Int?
  updatedAt DateTime? @db.Timestamptz()

  ActivityLog ActivityLog[]
  UserRole    UserRole[]

  // Foreign key
  Business Business @relation(fields: [businessId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@unique([email, businessId])
  @@unique([username, businessId])
  @@index([businessId])
  @@index([createdBy])
  @@index([createdAt])
  @@index([updatedBy])
  @@index([updatedAt])
}
