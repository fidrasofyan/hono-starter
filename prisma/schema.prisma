generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/database"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

// Models

model business {
  businessId Int       @id @default(autoincrement())
  isActive   Boolean
  name       String    @unique @db.VarChar(50)
  address    String?   @db.VarChar(100)
  createdAt  DateTime  @db.Timestamptz()
  updatedAt  DateTime? @db.Timestamptz()
  user       user[]
  role       role[]
}

model permission {
  permissionId   Int               @id @default(autoincrement())
  name           String            @unique @db.VarChar(50)
  createdAt      DateTime          @db.Timestamptz()
  updatedAt      DateTime?         @db.Timestamptz()
  rolePermission role_permission[]
}

model role {
  roleId         Int               @id @default(autoincrement())
  name           String            @db.VarChar(50)
  description    String?           @db.VarChar(100)
  createdAt      DateTime          @db.Timestamptz()
  updatedAt      DateTime?         @db.Timestamptz()
  userRole       user_role[]
  rolePermission role_permission[]
  business       business          @relation(fields: [businessId], references: [businessId], onUpdate: Cascade, onDelete: Cascade)
  businessId     Int

  @@unique([name, businessId])
}

model role_permission {
  roleId       Int
  permissionId Int
  createdAt    DateTime   @db.Timestamptz()
  role         role       @relation(fields: [roleId], references: [roleId], onUpdate: Cascade, onDelete: Cascade)
  permission   permission @relation(fields: [permissionId], references: [permissionId], onUpdate: Cascade, onDelete: Cascade)

  @@id([roleId, permissionId])
}

model user {
  userId     Int         @id @default(autoincrement())
  isActive   Boolean
  email      String?     @db.VarChar(100)
  username   String      @db.VarChar(100)
  password   String      @db.VarChar(255)
  firstName  String      @db.VarChar(50)
  lastName   String?     @db.VarChar(50)
  createdAt  DateTime    @db.Timestamptz()
  updatedAt  DateTime?   @db.Timestamptz()
  business   business    @relation(fields: [businessId], references: [businessId], onUpdate: Cascade, onDelete: Cascade)
  businessId Int
  userRole   user_role[]

  @@unique([email, businessId])
  @@unique([username, businessId])
}

model user_role {
  userId    Int
  roleId    Int
  createdAt DateTime @db.Timestamptz()
  user      user     @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  role      role     @relation(fields: [roleId], references: [roleId], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, roleId])
}
